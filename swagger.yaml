swagger: '2.0'
info:
  version: 1.0.0
  title: Greenfield BSC Archiver Service API
  description: API for handling block query in the Greenfield BSC Archiver.
host: 'greenfield-bsc-archiver'
#basePath: "/eth/v1"
schemes:
  - http

paths:
  /:
    post:
      tags:
        - "block"
      summary: "Returns information of the block matching the given block number."
      operationId: "getBlockByNumber"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockByNumberRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /eth_getBundledBlockByNumber:
    post:
      tags:
        - "block"
      summary: "Returns information of the block bundle matching the given block number."
      operationId: "getBundledBlockByNumber"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBundledBlockByNumberRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /eth_blockNumber:
    post:
      tags:
        - "block"
      summary: "Returns the latest block number of the blockchain"
      operationId: "getBlockNumber"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockNumberRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /eth_getBlockByHash:
    post:
      tags:
        - "block"
      summary: "Returns information of the block matching the given block hash"
      operationId: "getBlockByHash"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockByHashRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  //:
    post:
      tags:
        - "block"
      summary: "Returns information of the block matching the given block number."
      operationId: "getBlockByNumberSimplified"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockByNumberSimplifiedRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /bsc/v1/blocks/{block_number}/bundle/name:
    get:
      tags:
        - "block"
      summary: "Get bundle name by block number"
      operationId: "getBundleNameByBlockNumber"
      produces:
        - "application/json"
      parameters:
        - name: "block_number"
          in: "path"
          description: "Block identifier. Can be one of: 'head' (canonical head in node's view), 'genesis', 'finalized', <slot>, <hex encoded blockRoot with 0x prefix>"
          required: true
          type: string
          minLength: 1
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBundleNameByBlockNumberRPCResponse"
        "400":
          description: 'Bad Request'
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: 'blob not found'
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"

definitions:
  block:
    type: object
    properties:
      hash:
        type: string
        example: "0x3757a8cc692ec0ffe09c93d147e690fbc2dd8e2a94ca94050059adb6e9b7b1fc"
      parentHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      sha3Uncles:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      miner:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      stateRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      transactionsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      receiptsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      logsBloom:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      difficulty:
        type: string
        example: "0x186a1"
        x-nullable: true
      totalDifficulty:
        type: string
        example: "0x176d20b"
        x-nullable: true
      size:
        type: string
        example: "0x176d20b"
      number:
        type: string
        example: "100000"
        x-nullable: true
      gasLimit:
        type: string
        example: "8000000"
      gasUsed:
        type: string
        example: "21000"
      timestamp:
        type: string
        example: "0x5f4e5f87"
      extraData:
        type: string
        example: "0x123456"
      mixHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      nonce:
        type: string
        example: "0x0000000000000042"
      baseFeePerGas:
        type: string
        example: "1000000000"
        x-nullable: true
      withdrawalsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        x-nullable: true
      blobGasUsed:
        type: string
        example: "1000"
        x-nullable: true
      excessBlobGas:
        type: string
        example: "500"
        x-nullable: true
      parentBeaconBlockRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        x-nullable: true
      transactions:
        type: array
        items:
          $ref: '#/definitions/transaction'
      uncles:
        type: array
        items:
          $ref: '#/definitions/header'
      withdrawals:
        type: array
        items:
          $ref: '#/definitions/withdrawal'
  simplifiedBlock:
    type: object
    properties:
      hash:
        type: string
        example: "0x3757a8cc692ec0ffe09c93d147e690fbc2dd8e2a94ca94050059adb6e9b7b1fc"
      parentHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      sha3Uncles:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      miner:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      stateRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      transactionsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      receiptsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      logsBloom:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      difficulty:
        type: string
        example: "0x186a1"
        x-nullable: true
      totalDifficulty:
        type: string
        example: "0x176d20b"
        x-nullable: true
      size:
        type: string
        example: "0x176d20b"
      number:
        type: string
        example: "100000"
        x-nullable: true
      gasLimit:
        type: string
        example: "8000000"
      gasUsed:
        type: string
        example: "21000"
      timestamp:
        type: string
        example: "0x5f4e5f87"
      extraData:
        type: string
        example: "0x123456"
      mixHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      nonce:
        type: string
        example: "0x0000000000000042"
      baseFeePerGas:
        type: string
        example: "1000000000"
        x-nullable: true
      withdrawalsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        x-nullable: true
      blobGasUsed:
        type: string
        example: "1000"
        x-nullable: true
      excessBlobGas:
        type: string
        example: "500"
        x-nullable: true
      parentBeaconBlockRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        x-nullable: true
      transactions:
        type: array
        items:
          type: string
      uncles:
        type: array
        items:
          $ref: '#/definitions/header'
      withdrawals:
        type: array
        items:
          $ref: '#/definitions/withdrawal'
  transaction:
    type: object
    properties:
      blockHash:
        type: string
        example: "0x1d59179991e4b016d5fcf4aba59db622f064e654a82714e468c07f9f54efebd2"
        x-nullable: true
      blockNumber:
        type: string
        example: "0x280468f"
        x-nullable: true
      from:
        type: string
        example: "0x5478b551e1c42e56417c44245f10b20e3b6347e8"
      gas:
        type: string
        example: "0x7a1200"
      gasPrice:
        type: string
        example: "0x12a05f200"
      maxFeePerGas:
        type: string
        example: "0x12a05f200"
        x-nullable: true
      maxPriorityFeePerGas:
        type: string
        example: "0x12a05f200"
        x-nullable: true
      hash:
        type: string
        example: "0x5f5def5f5f9352d8a421c692bd51541c308b4a14c8044a2680cb6db811caf2d5"
      input:
        type: string
        example: "0xb1dc65a400011eab462cabbd1f14fd9ab59a179156b71ed2c40dcab009bf2d870d27f157000000000000000000000000000000000000000000000000000000000067fd016d69030d5cb1244dc8531787cfc96f83b6d77c347e8796b1d1ca94a36a4c2f6a00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000004b200000000000000000000000000000000000000000000000000000000000004b212e0e50632d2b5f1313dcf8c2c9b3044e7c7424bc94860d72f72174c2122bf618000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a474c11eb16492411f76cd717570c10d39a82cea3568e35a2f3b9d8655f55494e5576f4f3353b92361631f467db0bfae0fcf3fe199eef274da5bad572cedb3805fbf1ba1c001c2dcaa3a766bd2f928fe08e21dfd02715c94d615967be3e2a36c5021530db5c349bdfec118a6b3852701d540b18bb952b3905645e20bff695582e588e165d749f45965598e42181ffe0a9bbdad13d3ce057be0e5bacc2c61bfc4148087e4c0213d3ecfb2bbd9b9d65f7d3d3d980da0dc5f97080b961920c525100000000000000000000000000000000000000000000000000000000000000066ac29d0520e21a66d420d19f168bc5208ab5fbbbbc6809f03cc68fc0769f65d76b20724971f4583c1ec159edc32f155f46f73eedb5f92f48f3af9076e1eaca6142f1777b92084cad4181b49db98f8e0bd1a8e622136ff2fdcd6137f25bb778f7372556fb34027f9b874820e13a19317b14ec67201d927d77984cdceecd7258356cdff274059a08beacf77f4afc63234b30b9bf83daa8ede3e44e53d4dec586ab21bbd5281d1a220224d1cf963912d45447e039f4e6d4c45f0ad0c37f5fde20de"
      nonce:
        type: string
        example: "0xc004"
      to:
        type: string
        example: "0xac24299a91b72d1cb5b31147e3cf54964d896974"
        x-nullable: true
      transactionIndex:
        type: string
        example: "0x0"
        x-nullable: true
      value:
        type: string
        example: "0x0"
      type:
        type: string
        example: "0x0"
      accessList:
        type: array
        items:
          $ref: '#/definitions/accessTuple'
        x-nullable: true
      chainId:
        type: string
        example: "0x61"
        x-nullable: true
      v:
        type: string
        example: "0xe5"
      r:
        type: string
        example: "0x3eabf58a7345ee0469c9276178a47e6ec3214b1b75d98d80921a38a89b30b"
      s:
        type: string
        example: "0x3eabf58a7345ee0469c9276178a47e6ec3214b1b75d98d80921a38a89b30b"
      maxFeePerBlobGas:
        type: string
        example: "0x12a05f200"
        x-nullable: true
      blobVersionedHashes:
        type: array
        items:
          type: string
          example: "0x01f3a7dedb08ff148ac90141d662c4ba4c872c037b7f0ebaacb256c05fde497f"
      yParity:
        type: string
        example: "0x12a05f200"
        x-nullable: true
  header:
    type: object
    properties:
      parentHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      sha3Uncles:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      miner:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      stateRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      transactionsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      receiptsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      logsBloom:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      difficulty:
        type: string
        example: "0x186a1"
        x-nullable: true
      number:
        type: string
        example: "100000"
        x-nullable: true
      gasLimit:
        type: string
        example: "8000000"
      gasUsed:
        type: string
        example: "21000"
      timestamp:
        type: string
        example: "0x5f4e5f87"
      extraData:
        type: string
        example: "0x123456"
      mixHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      nonce:
        type: string
        example: "0x0000000000000042"
      baseFeePerGas:
        type: string
        example: "1000000000"
        x-nullable: true
      withdrawalsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        x-nullable: true
      blobGasUsed:
        type: string
        example: "1000"
        x-nullable: true
      excessBlobGas:
        type: string
        example: "500"
        x-nullable: true
      parentBeaconBlockRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        x-nullable: true
  withdrawal:
    type: object
    properties:
      index:
        type: string
        example: "1"
      validator:
        type: string
        example: "12345"
      address:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      amount:
        type: string
        example: "1000000"
  accessList:
    type: object
    properties:
      address:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      storageKeys:
        type: array
        items:
          type: string
          example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
  accessTuple:
    type: object
    properties:
      address:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      storageKeys:
        type: array
        items:
          type: string
          example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"

  RPCRequest:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      method:
        type: string
        example: "eth_getBlockByNumber"
      params:
        type: array
        items:
          type: string
        example: ["0x1", true]
      id:
        type: integer
        example: 1

  GetBlockByNumberRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: object
        $ref: "#/definitions/block"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"
  GetBlockByNumberSimplifiedRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: object
        $ref: "#/definitions/simplifiedBlock"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"

  GetBundledBlockByNumberRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: array
        items:
            $ref: "#/definitions/block"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"

  GetBlockNumberRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: string
        example: "0x1"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"

  GetBlockByHashRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: object
        $ref: "#/definitions/block"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"
  GetBundleNameByBlockNumberRPCResponse:
    type: object
    properties:
      code:
        type: string
        description: "status code"
        example: 200
      message:
        type: string
        description: "error message if there is error"
        example: "signature invalid"
      data:
        description: "actual data for request"
        type: string
        example: 1

  RPCError:
    type: object
    properties:
      code:
        x-omitempty: false
        type: integer
        format: int64
        description: "RPC error code"
        example: -32602
      message:
        x-omitempty: false
        type: string
        description: "Error message"
        example: "Invalid params"

  Error:
    type: object
    properties:
      code:
        x-omitempty: false
        type: integer
        format: int64
        description: "HTTP error code"
        example: "400/500"
      message:
        x-omitempty: false
        type: string
        description: "Error message"
        example: "Bad request/Internal server error"
