swagger: '2.0'
info:
  version: 1.0.0
  title: Greenfield BSC Archiver Service API
  description: API for handling block query in the Greenfield BSC Archiver.
host: 'greenfield-bsc-archiver'
#basePath: "/eth/v1"
schemes:
  - http

paths:
  /:
    post:
      tags:
        - "block"
      summary: "Returns information of the block matching the given block number."
      operationId: "getBlockByNumber"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockByNumberRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /eth_getBundledBlockByNumber:
    post:
      tags:
        - "block"
      summary: "Returns information of the block bundle matching the given block number."
      operationId: "getBundledBlockByNumber"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBundledBlockByNumberRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /eth_blockNumber:
    post:
      tags:
        - "block"
      summary: "Returns the latest block number of the blockchain"
      operationId: "getBlockNumber"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockNumberRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /eth_getBlockByHash:
    post:
      tags:
        - "block"
      summary: "Returns information of the block matching the given block hash"
      operationId: "getBlockByHash"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RPCRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBlockByHashRPCResponse"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"
  /bsc/v1/blocks/{block_id}/bundle/start:
    get:
      tags:
        - "block"
      summary: "Get start block id of this bundle"
      operationId: "getBundleStartBlockID"
      produces:
        - "application/json"
      parameters:
        - name: "block_id"
          in: "path"
          description: "Block identifier. Can be one of: 'head' (canonical head in node's view), 'genesis', 'finalized', <slot>, <hex encoded blockRoot with 0x prefix>"
          required: true
          type: string
          minLength: 1
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetBundleStartBlockIDRPCResponse"
        "400":
          description: 'Bad Request'
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: 'blob not found'
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: 'internal server error'
          schema:
            $ref: "#/definitions/Error"

definitions:
  Block:
    type: object
    properties:
      Header:
        $ref: '#/definitions/Header'
      Body:
        $ref: '#/definitions/Body'

  Header:
    type: object
    properties:
      ParentHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      Sha3Uncles:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      Miner:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      StateRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      TransactionsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      ReceiptsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      LogsBloom:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      Difficulty:
        type: string
        example: "0x186a1"
      Number:
        type: string
        example: "100000"
      GasLimit:
        type: string
        example: "8000000"
      GasUsed:
        type: string
        example: "21000"
      Timestamp:
        type: string
        example: "0x5f4e5f87"
      ExtraData:
        type: string
        example: "0x123456"
      MixHash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      Nonce:
        type: string
        example: "0x0000000000000042"
      BaseFeePerGas:
        type: string
        example: "1000000000"
      WithdrawalsRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      BlobGasUsed:
        type: string
        example: "1000"
      ExcessBlobGas:
        type: string
        example: "500"
      ParentBeaconBlockRoot:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"

  Body:
    type: object
    properties:
      Transactions:
        type: array
        items:
          $ref: '#/definitions/Transaction'
      Uncles:
        type: array
        items:
          $ref: '#/definitions/Header'
      Withdrawals:
        type: array
        items:
          $ref: '#/definitions/Withdrawal'

  Transaction:
    type: object
    properties:
      hash:
        type: string
        example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      from:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      to:
        type: string
        example: "0xabcdef1234567890abcdef1234567890abcdef12"
      value:
        type: string
        example: "1000000000"

  Withdrawal:
    type: object
    properties:
      Index:
        type: string
        example: "1"
      Validator:
        type: string
        example: "12345"
      Address:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
      Amount:
        type: string
        example: "1000000"

  RPCRequest:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      method:
        type: string
        example: "eth_getBlockByNumber"
      params:
        type: array
        items:
          type: string
        example: ["0x1", true]
      id:
        type: integer
        example: 1

  GetBlockByNumberRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: object
        $ref: "#/definitions/Block"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"

  GetBundledBlockByNumberRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: array
        items:
            $ref: "#/definitions/Block"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"

  GetBlockNumberRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: string
        example: "0x1"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"

  GetBlockByHashRPCResponse:
    type: object
    properties:
      jsonrpc:
        type: string
        example: "2.0"
      result:
        type: object
        $ref: "#/definitions/Block"
      id:
        type: integer
        example: 1
      error:
        $ref: "#/definitions/RPCError"
  GetBundleStartBlockIDRPCResponse:
    type: object
    properties:
      code:
        type: string
        description: "status code"
        example: 200
      message:
        type: string
        description: "error message if there is error"
        example: "signature invalid"
      data:
        description: "actual data for request"
        type: string
        example: 1

  RPCError:
    type: object
    properties:
      code:
        x-omitempty: false
        type: integer
        format: int64
        description: "RPC error code"
        example: -32602
      message:
        x-omitempty: false
        type: string
        description: "Error message"
        example: "Invalid params"

  Error:
    type: object
    properties:
      code:
        x-omitempty: false
        type: integer
        format: int64
        description: "HTTP error code"
        example: "400/500"
      message:
        x-omitempty: false
        type: string
        description: "Error message"
        example: "Bad request/Internal server error"
