// Code generated by go-swagger; DO NOT EDIT.

package blob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetBlobSidecarsByBlockNumParams creates a new GetBlobSidecarsByBlockNumParams object
//
// There are no default values defined in the spec.
func NewGetBlobSidecarsByBlockNumParams() GetBlobSidecarsByBlockNumParams {

	return GetBlobSidecarsByBlockNumParams{}
}

// GetBlobSidecarsByBlockNumParams contains all the bound params for the get blob sidecars by block num operation
// typically these are obtained from a http.Request
//
// swagger:parameters getBlobSidecarsByBlockNum
type GetBlobSidecarsByBlockNumParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Block identifier. Can be one of: 'head' (canonical head in node's view), 'genesis', 'finalized', <slot>, <hex encoded blockRoot with 0x prefix>
	  Required: true
	  Min Length: 1
	  In: path
	*/
	BlockID string
	/*Array of indices for blob sidecars to request for in the specified block. Returns all blob sidecars in the block if not specified
	  In: query
	*/
	Indices []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetBlobSidecarsByBlockNumParams() beforehand.
func (o *GetBlobSidecarsByBlockNumParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rBlockID, rhkBlockID, _ := route.Params.GetOK("block_id")
	if err := o.bindBlockID(rBlockID, rhkBlockID, route.Formats); err != nil {
		res = append(res, err)
	}

	qIndices, qhkIndices, _ := qs.GetOK("indices")
	if err := o.bindIndices(qIndices, qhkIndices, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBlockID binds and validates parameter BlockID from path.
func (o *GetBlobSidecarsByBlockNumParams) bindBlockID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.BlockID = raw

	if err := o.validateBlockID(formats); err != nil {
		return err
	}

	return nil
}

// validateBlockID carries on validations for parameter BlockID
func (o *GetBlobSidecarsByBlockNumParams) validateBlockID(formats strfmt.Registry) error {

	if err := validate.MinLength("block_id", "path", o.BlockID, 1); err != nil {
		return err
	}

	return nil
}

// bindIndices binds and validates array parameter Indices from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetBlobSidecarsByBlockNumParams) bindIndices(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvIndices string
	if len(rawData) > 0 {
		qvIndices = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	indicesIC := swag.SplitByFormat(qvIndices, "")
	if len(indicesIC) == 0 {
		return nil
	}

	var indicesIR []string
	for _, indicesIV := range indicesIC {
		indicesI := indicesIV

		indicesIR = append(indicesIR, indicesI)
	}

	o.Indices = indicesIR

	return nil
}
