// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBundleNameByBlockNumberHandlerFunc turns a function with the right signature into a get bundle name by block number handler
type GetBundleNameByBlockNumberHandlerFunc func(GetBundleNameByBlockNumberParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBundleNameByBlockNumberHandlerFunc) Handle(params GetBundleNameByBlockNumberParams) middleware.Responder {
	return fn(params)
}

// GetBundleNameByBlockNumberHandler interface for that can handle valid get bundle name by block number params
type GetBundleNameByBlockNumberHandler interface {
	Handle(GetBundleNameByBlockNumberParams) middleware.Responder
}

// NewGetBundleNameByBlockNumber creates a new http.Handler for the get bundle name by block number operation
func NewGetBundleNameByBlockNumber(ctx *middleware.Context, handler GetBundleNameByBlockNumberHandler) *GetBundleNameByBlockNumber {
	return &GetBundleNameByBlockNumber{Context: ctx, Handler: handler}
}

/*
	GetBundleNameByBlockNumber swagger:route GET /bsc/v1/blocks/{block_number}/bundle/name block getBundleNameByBlockNumber

Get bundle name by block number
*/
type GetBundleNameByBlockNumber struct {
	Context *middleware.Context
	Handler GetBundleNameByBlockNumberHandler
}

func (o *GetBundleNameByBlockNumber) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBundleNameByBlockNumberParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
