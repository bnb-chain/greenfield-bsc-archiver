// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"greeenfield-bsc-archiver/models"
)

// GetBundleNameByBlockNumberOKCode is the HTTP code returned for type GetBundleNameByBlockNumberOK
const GetBundleNameByBlockNumberOKCode int = 200

/*
GetBundleNameByBlockNumberOK successful operation

swagger:response getBundleNameByBlockNumberOK
*/
type GetBundleNameByBlockNumberOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetBundleNameByBlockNumberRPCResponse `json:"body,omitempty"`
}

// NewGetBundleNameByBlockNumberOK creates GetBundleNameByBlockNumberOK with default headers values
func NewGetBundleNameByBlockNumberOK() *GetBundleNameByBlockNumberOK {

	return &GetBundleNameByBlockNumberOK{}
}

// WithPayload adds the payload to the get bundle name by block number o k response
func (o *GetBundleNameByBlockNumberOK) WithPayload(payload *models.GetBundleNameByBlockNumberRPCResponse) *GetBundleNameByBlockNumberOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block number o k response
func (o *GetBundleNameByBlockNumberOK) SetPayload(payload *models.GetBundleNameByBlockNumberRPCResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockNumberOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBundleNameByBlockNumberBadRequestCode is the HTTP code returned for type GetBundleNameByBlockNumberBadRequest
const GetBundleNameByBlockNumberBadRequestCode int = 400

/*
GetBundleNameByBlockNumberBadRequest Bad Request

swagger:response getBundleNameByBlockNumberBadRequest
*/
type GetBundleNameByBlockNumberBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBundleNameByBlockNumberBadRequest creates GetBundleNameByBlockNumberBadRequest with default headers values
func NewGetBundleNameByBlockNumberBadRequest() *GetBundleNameByBlockNumberBadRequest {

	return &GetBundleNameByBlockNumberBadRequest{}
}

// WithPayload adds the payload to the get bundle name by block number bad request response
func (o *GetBundleNameByBlockNumberBadRequest) WithPayload(payload *models.Error) *GetBundleNameByBlockNumberBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block number bad request response
func (o *GetBundleNameByBlockNumberBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockNumberBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBundleNameByBlockNumberNotFoundCode is the HTTP code returned for type GetBundleNameByBlockNumberNotFound
const GetBundleNameByBlockNumberNotFoundCode int = 404

/*
GetBundleNameByBlockNumberNotFound blob not found

swagger:response getBundleNameByBlockNumberNotFound
*/
type GetBundleNameByBlockNumberNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBundleNameByBlockNumberNotFound creates GetBundleNameByBlockNumberNotFound with default headers values
func NewGetBundleNameByBlockNumberNotFound() *GetBundleNameByBlockNumberNotFound {

	return &GetBundleNameByBlockNumberNotFound{}
}

// WithPayload adds the payload to the get bundle name by block number not found response
func (o *GetBundleNameByBlockNumberNotFound) WithPayload(payload *models.Error) *GetBundleNameByBlockNumberNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block number not found response
func (o *GetBundleNameByBlockNumberNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockNumberNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBundleNameByBlockNumberInternalServerErrorCode is the HTTP code returned for type GetBundleNameByBlockNumberInternalServerError
const GetBundleNameByBlockNumberInternalServerErrorCode int = 500

/*
GetBundleNameByBlockNumberInternalServerError internal server error

swagger:response getBundleNameByBlockNumberInternalServerError
*/
type GetBundleNameByBlockNumberInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBundleNameByBlockNumberInternalServerError creates GetBundleNameByBlockNumberInternalServerError with default headers values
func NewGetBundleNameByBlockNumberInternalServerError() *GetBundleNameByBlockNumberInternalServerError {

	return &GetBundleNameByBlockNumberInternalServerError{}
}

// WithPayload adds the payload to the get bundle name by block number internal server error response
func (o *GetBundleNameByBlockNumberInternalServerError) WithPayload(payload *models.Error) *GetBundleNameByBlockNumberInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block number internal server error response
func (o *GetBundleNameByBlockNumberInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockNumberInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
