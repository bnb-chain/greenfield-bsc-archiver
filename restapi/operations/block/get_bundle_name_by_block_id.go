// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBundleNameByBlockIDHandlerFunc turns a function with the right signature into a get bundle name by block ID handler
type GetBundleNameByBlockIDHandlerFunc func(GetBundleNameByBlockIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBundleNameByBlockIDHandlerFunc) Handle(params GetBundleNameByBlockIDParams) middleware.Responder {
	return fn(params)
}

// GetBundleNameByBlockIDHandler interface for that can handle valid get bundle name by block ID params
type GetBundleNameByBlockIDHandler interface {
	Handle(GetBundleNameByBlockIDParams) middleware.Responder
}

// NewGetBundleNameByBlockID creates a new http.Handler for the get bundle name by block ID operation
func NewGetBundleNameByBlockID(ctx *middleware.Context, handler GetBundleNameByBlockIDHandler) *GetBundleNameByBlockID {
	return &GetBundleNameByBlockID{Context: ctx, Handler: handler}
}

/*
	GetBundleNameByBlockID swagger:route GET /bsc/v1/blocks/{block_id}/bundle/name block getBundleNameByBlockId

Get bundle name by block id
*/
type GetBundleNameByBlockID struct {
	Context *middleware.Context
	Handler GetBundleNameByBlockIDHandler
}

func (o *GetBundleNameByBlockID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBundleNameByBlockIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
