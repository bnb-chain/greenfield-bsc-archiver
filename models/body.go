// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Body body
//
// swagger:model Body
type Body struct {

	// transactions
	Transactions []*Transaction `json:"Transactions"`

	// uncles
	Uncles []*Header `json:"Uncles"`

	// withdrawals
	Withdrawals []*Withdrawal `json:"Withdrawals"`
}

// Validate validates this body
func (m *Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUncles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWithdrawals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Body) validateTransactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Body) validateUncles(formats strfmt.Registry) error {
	if swag.IsZero(m.Uncles) { // not required
		return nil
	}

	for i := 0; i < len(m.Uncles); i++ {
		if swag.IsZero(m.Uncles[i]) { // not required
			continue
		}

		if m.Uncles[i] != nil {
			if err := m.Uncles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Uncles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Uncles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Body) validateWithdrawals(formats strfmt.Registry) error {
	if swag.IsZero(m.Withdrawals) { // not required
		return nil
	}

	for i := 0; i < len(m.Withdrawals); i++ {
		if swag.IsZero(m.Withdrawals[i]) { // not required
			continue
		}

		if m.Withdrawals[i] != nil {
			if err := m.Withdrawals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Withdrawals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Withdrawals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this body based on the context it is used
func (m *Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUncles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWithdrawals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Body) contextValidateTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transactions); i++ {

		if m.Transactions[i] != nil {

			if swag.IsZero(m.Transactions[i]) { // not required
				return nil
			}

			if err := m.Transactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Body) contextValidateUncles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Uncles); i++ {

		if m.Uncles[i] != nil {

			if swag.IsZero(m.Uncles[i]) { // not required
				return nil
			}

			if err := m.Uncles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Uncles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Uncles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Body) contextValidateWithdrawals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Withdrawals); i++ {

		if m.Withdrawals[i] != nil {

			if swag.IsZero(m.Withdrawals[i]) { // not required
				return nil
			}

			if err := m.Withdrawals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Withdrawals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Withdrawals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Body) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Body) UnmarshalBinary(b []byte) error {
	var res Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
