// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBlockByHashHandlerFunc turns a function with the right signature into a get block by hash handler
type GetBlockByHashHandlerFunc func(GetBlockByHashParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBlockByHashHandlerFunc) Handle(params GetBlockByHashParams) middleware.Responder {
	return fn(params)
}

// GetBlockByHashHandler interface for that can handle valid get block by hash params
type GetBlockByHashHandler interface {
	Handle(GetBlockByHashParams) middleware.Responder
}

// NewGetBlockByHash creates a new http.Handler for the get block by hash operation
func NewGetBlockByHash(ctx *middleware.Context, handler GetBlockByHashHandler) *GetBlockByHash {
	return &GetBlockByHash{Context: ctx, Handler: handler}
}

/*
	GetBlockByHash swagger:route POST /eth_getBlockByHash block getBlockByHash

Returns information of the block matching the given block hash
*/
type GetBlockByHash struct {
	Context *middleware.Context
	Handler GetBlockByHashHandler
}

func (o *GetBlockByHash) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBlockByHashParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
