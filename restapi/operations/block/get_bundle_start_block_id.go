// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBundleStartBlockIDHandlerFunc turns a function with the right signature into a get bundle start block ID handler
type GetBundleStartBlockIDHandlerFunc func(GetBundleStartBlockIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBundleStartBlockIDHandlerFunc) Handle(params GetBundleStartBlockIDParams) middleware.Responder {
	return fn(params)
}

// GetBundleStartBlockIDHandler interface for that can handle valid get bundle start block ID params
type GetBundleStartBlockIDHandler interface {
	Handle(GetBundleStartBlockIDParams) middleware.Responder
}

// NewGetBundleStartBlockID creates a new http.Handler for the get bundle start block ID operation
func NewGetBundleStartBlockID(ctx *middleware.Context, handler GetBundleStartBlockIDHandler) *GetBundleStartBlockID {
	return &GetBundleStartBlockID{Context: ctx, Handler: handler}
}

/*
	GetBundleStartBlockID swagger:route GET /bsc/v1/blocks/{block_id}/bundle/start block getBundleStartBlockId

Get start block id of this bundle
*/
type GetBundleStartBlockID struct {
	Context *middleware.Context
	Handler GetBundleStartBlockIDHandler
}

func (o *GetBundleStartBlockID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBundleStartBlockIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
