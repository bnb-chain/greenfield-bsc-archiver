// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for handling block query in the Greenfield BSC Archiver.",
    "title": "Greenfield BSC Archiver Service API",
    "version": "1.0.0"
  },
  "host": "greenfield-bsc-archiver",
  "paths": {
    "/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns information of the block matching the given block number.",
        "operationId": "getBlockByNumber",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBlockByNumberRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bsc/v1/blocks/{block_id}/bundle/start": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Get start block id of this bundle",
        "operationId": "getBundleStartBlockID",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "Block identifier. Can be one of: 'head' (canonical head in node's view), 'genesis', 'finalized', \u003cslot\u003e, \u003chex encoded blockRoot with 0x prefix\u003e",
            "name": "block_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBundleStartBlockIDRPCResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "blob not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/eth_blockNumber": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns the latest block number of the blockchain",
        "operationId": "getBlockNumber",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBlockNumberRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/eth_getBlockByHash": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns information of the block matching the given block hash",
        "operationId": "getBlockByHash",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBlockByHashRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/eth_getBundledBlockByNumber": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns information of the block bundle matching the given block number.",
        "operationId": "getBundledBlockByNumber",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBundledBlockByNumberRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Block": {
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body"
        },
        "Header": {
          "$ref": "#/definitions/Header"
        }
      }
    },
    "Body": {
      "type": "object",
      "properties": {
        "Transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "Uncles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Header"
          }
        },
        "Withdrawals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Withdrawal"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false,
          "example": "400/500"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "x-omitempty": false,
          "example": "Bad request/Internal server error"
        }
      }
    },
    "GetBlockByHashRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "object",
          "$ref": "#/definitions/Block"
        }
      }
    },
    "GetBlockByNumberRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "object",
          "$ref": "#/definitions/Block"
        }
      }
    },
    "GetBlockNumberRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "string",
          "example": "0x1"
        }
      }
    },
    "GetBundleStartBlockIDRPCResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "status code",
          "type": "string",
          "example": 200
        },
        "data": {
          "description": "actual data for request",
          "type": "string",
          "example": 1
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "GetBundledBlockByNumberRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Block"
          }
        }
      }
    },
    "Header": {
      "type": "object",
      "properties": {
        "BaseFeePerGas": {
          "type": "string",
          "example": "1000000000"
        },
        "BlobGasUsed": {
          "type": "string",
          "example": "1000"
        },
        "Difficulty": {
          "type": "string",
          "example": "0x186a1"
        },
        "ExcessBlobGas": {
          "type": "string",
          "example": "500"
        },
        "ExtraData": {
          "type": "string",
          "example": "0x123456"
        },
        "GasLimit": {
          "type": "string",
          "example": "8000000"
        },
        "GasUsed": {
          "type": "string",
          "example": "21000"
        },
        "LogsBloom": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Miner": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "MixHash": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Nonce": {
          "type": "string",
          "example": "0x0000000000000042"
        },
        "Number": {
          "type": "string",
          "example": "100000"
        },
        "ParentBeaconBlockRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "ParentHash": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "ReceiptsRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Sha3Uncles": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "StateRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Timestamp": {
          "type": "string",
          "example": "0x5f4e5f87"
        },
        "TransactionsRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "WithdrawalsRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        }
      }
    },
    "RPCError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "RPC error code",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false,
          "example": -32602
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "x-omitempty": false,
          "example": "Invalid params"
        }
      }
    },
    "RPCRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "method": {
          "type": "string",
          "example": "eth_getBlockByNumber"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "0x1",
            true
          ]
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "hash": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "to": {
          "type": "string",
          "example": "0xabcdef1234567890abcdef1234567890abcdef12"
        },
        "value": {
          "type": "string",
          "example": "1000000000"
        }
      }
    },
    "Withdrawal": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "Amount": {
          "type": "string",
          "example": "1000000"
        },
        "Index": {
          "type": "string",
          "example": "1"
        },
        "Validator": {
          "type": "string",
          "example": "12345"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for handling block query in the Greenfield BSC Archiver.",
    "title": "Greenfield BSC Archiver Service API",
    "version": "1.0.0"
  },
  "host": "greenfield-bsc-archiver",
  "paths": {
    "/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns information of the block matching the given block number.",
        "operationId": "getBlockByNumber",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBlockByNumberRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bsc/v1/blocks/{block_id}/bundle/start": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Get start block id of this bundle",
        "operationId": "getBundleStartBlockID",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "Block identifier. Can be one of: 'head' (canonical head in node's view), 'genesis', 'finalized', \u003cslot\u003e, \u003chex encoded blockRoot with 0x prefix\u003e",
            "name": "block_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBundleStartBlockIDRPCResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "blob not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/eth_blockNumber": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns the latest block number of the blockchain",
        "operationId": "getBlockNumber",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBlockNumberRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/eth_getBlockByHash": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns information of the block matching the given block hash",
        "operationId": "getBlockByHash",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBlockByHashRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/eth_getBundledBlockByNumber": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "block"
        ],
        "summary": "Returns information of the block bundle matching the given block number.",
        "operationId": "getBundledBlockByNumber",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RPCRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetBundledBlockByNumberRPCResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Block": {
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body"
        },
        "Header": {
          "$ref": "#/definitions/Header"
        }
      }
    },
    "Body": {
      "type": "object",
      "properties": {
        "Transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "Uncles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Header"
          }
        },
        "Withdrawals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Withdrawal"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP error code",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false,
          "example": "400/500"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "x-omitempty": false,
          "example": "Bad request/Internal server error"
        }
      }
    },
    "GetBlockByHashRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "object",
          "$ref": "#/definitions/Block"
        }
      }
    },
    "GetBlockByNumberRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "object",
          "$ref": "#/definitions/Block"
        }
      }
    },
    "GetBlockNumberRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "string",
          "example": "0x1"
        }
      }
    },
    "GetBundleStartBlockIDRPCResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "status code",
          "type": "string",
          "example": 200
        },
        "data": {
          "description": "actual data for request",
          "type": "string",
          "example": 1
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "GetBundledBlockByNumberRPCResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/RPCError"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Block"
          }
        }
      }
    },
    "Header": {
      "type": "object",
      "properties": {
        "BaseFeePerGas": {
          "type": "string",
          "example": "1000000000"
        },
        "BlobGasUsed": {
          "type": "string",
          "example": "1000"
        },
        "Difficulty": {
          "type": "string",
          "example": "0x186a1"
        },
        "ExcessBlobGas": {
          "type": "string",
          "example": "500"
        },
        "ExtraData": {
          "type": "string",
          "example": "0x123456"
        },
        "GasLimit": {
          "type": "string",
          "example": "8000000"
        },
        "GasUsed": {
          "type": "string",
          "example": "21000"
        },
        "LogsBloom": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Miner": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "MixHash": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Nonce": {
          "type": "string",
          "example": "0x0000000000000042"
        },
        "Number": {
          "type": "string",
          "example": "100000"
        },
        "ParentBeaconBlockRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "ParentHash": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "ReceiptsRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Sha3Uncles": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "StateRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "Timestamp": {
          "type": "string",
          "example": "0x5f4e5f87"
        },
        "TransactionsRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "WithdrawalsRoot": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        }
      }
    },
    "RPCError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "RPC error code",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false,
          "example": -32602
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "x-omitempty": false,
          "example": "Invalid params"
        }
      }
    },
    "RPCRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "jsonrpc": {
          "type": "string",
          "example": "2.0"
        },
        "method": {
          "type": "string",
          "example": "eth_getBlockByNumber"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "0x1",
            true
          ]
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "hash": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        },
        "to": {
          "type": "string",
          "example": "0xabcdef1234567890abcdef1234567890abcdef12"
        },
        "value": {
          "type": "string",
          "example": "1000000000"
        }
      }
    },
    "Withdrawal": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "Amount": {
          "type": "string",
          "example": "1000000"
        },
        "Index": {
          "type": "string",
          "example": "1"
        },
        "Validator": {
          "type": "string",
          "example": "12345"
        }
      }
    }
  }
}`))
}
