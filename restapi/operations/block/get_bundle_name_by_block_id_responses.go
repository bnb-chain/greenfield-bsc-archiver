// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"greeenfield-bsc-archiver/models"
)

// GetBundleNameByBlockIDOKCode is the HTTP code returned for type GetBundleNameByBlockIDOK
const GetBundleNameByBlockIDOKCode int = 200

/*
GetBundleNameByBlockIDOK successful operation

swagger:response getBundleNameByBlockIdOK
*/
type GetBundleNameByBlockIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetBundleNameByBlockIDRPCResponse `json:"body,omitempty"`
}

// NewGetBundleNameByBlockIDOK creates GetBundleNameByBlockIDOK with default headers values
func NewGetBundleNameByBlockIDOK() *GetBundleNameByBlockIDOK {

	return &GetBundleNameByBlockIDOK{}
}

// WithPayload adds the payload to the get bundle name by block Id o k response
func (o *GetBundleNameByBlockIDOK) WithPayload(payload *models.GetBundleNameByBlockIDRPCResponse) *GetBundleNameByBlockIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block Id o k response
func (o *GetBundleNameByBlockIDOK) SetPayload(payload *models.GetBundleNameByBlockIDRPCResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBundleNameByBlockIDBadRequestCode is the HTTP code returned for type GetBundleNameByBlockIDBadRequest
const GetBundleNameByBlockIDBadRequestCode int = 400

/*
GetBundleNameByBlockIDBadRequest Bad Request

swagger:response getBundleNameByBlockIdBadRequest
*/
type GetBundleNameByBlockIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBundleNameByBlockIDBadRequest creates GetBundleNameByBlockIDBadRequest with default headers values
func NewGetBundleNameByBlockIDBadRequest() *GetBundleNameByBlockIDBadRequest {

	return &GetBundleNameByBlockIDBadRequest{}
}

// WithPayload adds the payload to the get bundle name by block Id bad request response
func (o *GetBundleNameByBlockIDBadRequest) WithPayload(payload *models.Error) *GetBundleNameByBlockIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block Id bad request response
func (o *GetBundleNameByBlockIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBundleNameByBlockIDNotFoundCode is the HTTP code returned for type GetBundleNameByBlockIDNotFound
const GetBundleNameByBlockIDNotFoundCode int = 404

/*
GetBundleNameByBlockIDNotFound blob not found

swagger:response getBundleNameByBlockIdNotFound
*/
type GetBundleNameByBlockIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBundleNameByBlockIDNotFound creates GetBundleNameByBlockIDNotFound with default headers values
func NewGetBundleNameByBlockIDNotFound() *GetBundleNameByBlockIDNotFound {

	return &GetBundleNameByBlockIDNotFound{}
}

// WithPayload adds the payload to the get bundle name by block Id not found response
func (o *GetBundleNameByBlockIDNotFound) WithPayload(payload *models.Error) *GetBundleNameByBlockIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block Id not found response
func (o *GetBundleNameByBlockIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBundleNameByBlockIDInternalServerErrorCode is the HTTP code returned for type GetBundleNameByBlockIDInternalServerError
const GetBundleNameByBlockIDInternalServerErrorCode int = 500

/*
GetBundleNameByBlockIDInternalServerError internal server error

swagger:response getBundleNameByBlockIdInternalServerError
*/
type GetBundleNameByBlockIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBundleNameByBlockIDInternalServerError creates GetBundleNameByBlockIDInternalServerError with default headers values
func NewGetBundleNameByBlockIDInternalServerError() *GetBundleNameByBlockIDInternalServerError {

	return &GetBundleNameByBlockIDInternalServerError{}
}

// WithPayload adds the payload to the get bundle name by block Id internal server error response
func (o *GetBundleNameByBlockIDInternalServerError) WithPayload(payload *models.Error) *GetBundleNameByBlockIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get bundle name by block Id internal server error response
func (o *GetBundleNameByBlockIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBundleNameByBlockIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
