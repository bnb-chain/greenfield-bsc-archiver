// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Transaction transaction
//
// swagger:model transaction
type Transaction struct {

	// access list
	AccessList []*AccessTuple `json:"accessList"`

	// block hash
	// Example: 0x1d59179991e4b016d5fcf4aba59db622f064e654a82714e468c07f9f54efebd2
	BlockHash *string `json:"blockHash,omitempty"`

	// block number
	// Example: 0x280468f
	BlockNumber *string `json:"blockNumber,omitempty"`

	// chain Id
	// Example: 0x61
	ChainID *string `json:"chainId,omitempty"`

	// from
	// Example: 0x5478b551e1c42e56417c44245f10b20e3b6347e8
	From string `json:"from,omitempty"`

	// gas
	// Example: 0x7a1200
	Gas string `json:"gas,omitempty"`

	// gas price
	// Example: 0x12a05f200
	GasPrice string `json:"gasPrice,omitempty"`

	// hash
	// Example: 0x5f5def5f5f9352d8a421c692bd51541c308b4a14c8044a2680cb6db811caf2d5
	Hash string `json:"hash,omitempty"`

	// input
	// Example: 0xb1dc65a400011eab462cabbd1f14fd9ab59a179156b71ed2c40dcab009bf2d870d27f157000000000000000000000000000000000000000000000000000000000067fd016d69030d5cb1244dc8531787cfc96f83b6d77c347e8796b1d1ca94a36a4c2f6a00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000004b200000000000000000000000000000000000000000000000000000000000004b212e0e50632d2b5f1313dcf8c2c9b3044e7c7424bc94860d72f72174c2122bf618000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a474c11eb16492411f76cd717570c10d39a82cea3568e35a2f3b9d8655f55494e5576f4f3353b92361631f467db0bfae0fcf3fe199eef274da5bad572cedb3805fbf1ba1c001c2dcaa3a766bd2f928fe08e21dfd02715c94d615967be3e2a36c5021530db5c349bdfec118a6b3852701d540b18bb952b3905645e20bff695582e588e165d749f45965598e42181ffe0a9bbdad13d3ce057be0e5bacc2c61bfc4148087e4c0213d3ecfb2bbd9b9d65f7d3d3d980da0dc5f97080b961920c525100000000000000000000000000000000000000000000000000000000000000066ac29d0520e21a66d420d19f168bc5208ab5fbbbbc6809f03cc68fc0769f65d76b20724971f4583c1ec159edc32f155f46f73eedb5f92f48f3af9076e1eaca6142f1777b92084cad4181b49db98f8e0bd1a8e622136ff2fdcd6137f25bb778f7372556fb34027f9b874820e13a19317b14ec67201d927d77984cdceecd7258356cdff274059a08beacf77f4afc63234b30b9bf83daa8ede3e44e53d4dec586ab21bbd5281d1a220224d1cf963912d45447e039f4e6d4c45f0ad0c37f5fde20de
	Input string `json:"input,omitempty"`

	// max fee per gas
	// Example: 0x12a05f200
	MaxFeePerGas *string `json:"maxFeePerGas,omitempty"`

	// max priority fee per gas
	// Example: 0x12a05f200
	MaxPriorityFeePerGas *string `json:"maxPriorityFeePerGas,omitempty"`

	// nonce
	// Example: 0xc004
	Nonce string `json:"nonce,omitempty"`

	// r
	// Example: 0x3eabf58a7345ee0469c9276178a47e6ec3214b1b75d98d80921a38a89b30b
	R string `json:"r,omitempty"`

	// s
	// Example: 0x3eabf58a7345ee0469c9276178a47e6ec3214b1b75d98d80921a38a89b30b
	S string `json:"s,omitempty"`

	// to
	// Example: 0xac24299a91b72d1cb5b31147e3cf54964d896974
	To *string `json:"to,omitempty"`

	// transaction index
	// Example: 0x0
	TransactionIndex *string `json:"transactionIndex,omitempty"`

	// type
	// Example: 0x0
	Type string `json:"type,omitempty"`

	// v
	// Example: 0xe5
	V string `json:"v,omitempty"`

	// value
	// Example: 0x0
	Value string `json:"value,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateAccessList(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessList) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessList); i++ {
		if swag.IsZero(m.AccessList[i]) { // not required
			continue
		}

		if m.AccessList[i] != nil {
			if err := m.AccessList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this transaction based on the context it is used
func (m *Transaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) contextValidateAccessList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccessList); i++ {

		if m.AccessList[i] != nil {

			if swag.IsZero(m.AccessList[i]) { // not required
				return nil
			}

			if err := m.AccessList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
